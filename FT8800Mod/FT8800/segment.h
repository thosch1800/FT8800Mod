#ifndef SEGMENT_H_
#define SEGMENT_H_

typedef struct
{
    char Character;
    uint8_t A : 1;
    uint8_t B : 1;
    uint8_t C : 1;
    uint8_t D : 1;
    uint8_t E : 1;
    uint8_t F : 1;
    uint8_t G : 1;
    uint8_t M : 1;
    uint8_t H : 1;
    uint8_t J : 1;
    uint8_t K : 1;
    uint8_t Q : 1;
    uint8_t N : 1;
} Segment;

//    AAAAAAA      -----
//   F H J K B    |\ | /|
//   F  HJK  B    | \|/ |
//    GGG MMM      -- --
//   E  QPN  C    | /|\ |
//   E Q P N C    |/ | \|
//    DDDDDDDD     -----
//
// NOTE: J is J and P
// 

const Segment segments[] = {
    //     A B C D E F G M H J K Q N
    { ' ', 0,0,0,0,0,0,0,0,0,0,0,0,0 },
    { 'A', 1,1,1,0,1,1,1,1,0,0,0,0,0 },
    { 'B', 1,1,1,1,0,0,0,1,0,1,0,0,0 },
    { 'C', 1,0,0,1,1,1,0,0,0,0,0,0,0 },
    { 'D', 1,1,1,1,0,0,0,0,0,1,0,0,0 },
    { 'E', 1,0,0,1,1,1,1,1,0,0,0,0,0 },
    { 'F', 1,0,0,0,1,1,1,1,0,0,0,0,0 },
    { 'G', 1,0,1,1,1,1,0,1,0,0,0,0,0 },
    { 'H', 0,1,1,0,1,1,1,1,0,0,0,0,0 },
    { 'I', 1,0,0,1,0,0,0,0,0,1,0,0,0 },
    { 'J', 1,1,1,1,1,0,0,0,0,0,0,0,0 },
    { 'K', 0,0,0,0,1,1,1,0,0,0,1,0,1 },
    { 'L', 0,0,0,1,1,1,0,0,0,0,0,0,0 },
    { 'M', 0,1,1,0,1,1,0,0,1,0,1,0,0 },
    { 'N', 0,1,1,0,1,1,0,0,1,0,0,0,1 },
    { 'O', 1,1,1,1,1,1,0,0,0,0,0,0,0 },
    { 'P', 1,1,0,0,1,1,1,1,0,0,0,0,0 },
    { 'Q', 1,1,1,1,1,1,0,0,0,0,0,0,1 },
    { 'R', 1,1,0,0,1,1,1,1,0,0,0,0,1 },
    { 'S', 1,0,0,1,0,1,1,0,0,0,0,0,1 },
    { 'T', 1,0,0,0,0,0,0,0,0,1,0,0,0 },
    { 'U', 0,1,1,1,1,1,0,0,0,0,0,0,0 },
    { 'V', 0,0,0,0,1,1,0,0,0,0,1,1,0 },
    { 'W', 0,1,1,0,1,1,0,0,0,0,0,1,1 },
    { 'X', 0,0,0,0,0,0,0,0,1,0,1,1,1 },
    { 'Y', 0,1,1,1,0,1,1,1,0,0,0,0,0 },
    { 'Z', 1,0,0,1,0,0,0,0,0,0,1,1,0 },

    //     A B C D E F G M H J K Q N
    { '1', 0,1,1,0,0,0,0,0,0,0,0,0,0 },
    { '2', 1,1,0,1,1,0,1,1,0,0,0,0,0 },
    { '3', 1,1,1,1,0,0,1,1,0,0,0,0,0 },
    { '4', 0,1,1,0,0,1,1,1,0,0,0,0,0 },
    { '5', 1,0,1,1,0,1,1,1,0,0,0,0,0 },
    { '6', 1,0,1,1,1,1,1,1,0,0,0,0,0 },
    { '7', 1,1,1,0,0,0,0,0,0,0,0,0,0 },
    { '8', 1,1,1,1,1,1,1,1,0,0,0,0,0 },
    { '9', 1,1,1,1,0,1,1,1,0,0,0,0,0 },
    { '0', 1,1,1,1,1,1,0,0,0,0,1,1,0 },

    //     A B C D E F G M H J K Q N
    { '+', 0,0,0,0,0,0,1,1,0,1,0,0,0 },
    { '-', 0,0,0,0,0,0,1,1,0,0,0,0,0 },
    { '*', 0,0,0,0,0,0,1,1,1,0,1,1,1 },
    { '/', 0,0,0,0,0,0,0,0,0,0,1,1,0 },
    { '>', 0,0,0,0,0,0,0,0,1,0,0,1,0 },
    { '<', 0,0,0,0,0,0,0,0,0,0,1,0,1 },
    { ':', 0,0,0,0,0,0,0,0,0,1,0,0,0 },
    { '_', 0,0,0,1,0,0,0,0,0,0,0,0,0 },
    { '´', 0,0,0,0,0,0,0,0,0,0,1,0,0 },
    { '@', 1,1,1,1,1,1,1,0,0,0,0,0,1 },
    { '&', 1,0,0,1,1,0,1,0,1,0,1,0,1 },
    { '$', 1,0,1,1,0,1,1,1,0,1,0,0,0 },

    {'\n', 0,0,0,0,0,0,1,0,0,0,0,0,0 },
};
const uint8_t segmentsSize = sizeof(segments) / sizeof(segments[0]);

#endif /* SEGMENT_H_ */